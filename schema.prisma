// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  image_path    String?
  provider      String?
  password      String?
  CreatedAt     DateTime        @default(now())
  active        Boolean         @default(false) //this is for the email verification it needs to be active true 
  Favorite      Favorite[]
  Review        Review[]
  activateToken ActivateToken[]
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //When applied to a field of type DateTime, this directive ensures that whenever the corresponding record is updated, the value of the updatedAt field is automatically set to the current date and time.
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Favorite {
  id           String @unique
  title        String
  overview     String
  poster_path  String
  release_date String
  vote_average String
  vote_count   String
  user         User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
}

model Review {
  id        String   @id @default(cuid())
  comment   String
  title     String
  tmdb      Int
  rating    Float
  CreatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
}
